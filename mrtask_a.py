#This is Task 4 part - a from MapReduce Programming Assignment 
# Member 1: Nikhil Dhiman (nikhildhiman3644@gmail.com)
# Member 2: Rohan kulkarni (rohan.kulkarni951@gmail.com)
# Member 3: Mahesh Kumar Patra (maheshkumarpatra5@gmail.com)

#To run this script: 
#python mrtask_a.py <input-file-path> <output-file-path>

from mrjob.job import MRJob
from mrjob.step import MRStep

class MostTripsAndRevenue(MRJob):

    # Class variables
    max_trips = 0
    max_revenue = 0
    max_vendor = 0

    #Mapper function
    def mapper(self, _, line):

        #Skip header in csv
        if line.startswith("VendorID"):
            return

        # Split the line into fields
        fields = line.strip().split(",")
        
        #Extract the vendor ID and total amount fields
        vendor_id = fields[0]
        total_amount = float(fields[16])
        
        #Emit the vendor ID and total amount as a tuple
        yield vendor_id, (1, total_amount)

    #Reducer function
    def reducer(self, vendor_id, values):

        #Initialize the total number of trips and total revenue
        total_trips = 0
        total_revenue = 0
        
        #Find the total number of trips and total revenue for this vendor
        for count, total_amount in values:
            total_trips += count
            total_revenue += total_amount
        
        #Emit the vendor ID, total number of trips, and total revenue
        yield "", (vendor_id, total_trips, total_revenue)

    #Second reducer
    def reducer_final(self, key, values):
        #  initialize the maximum number of trips and total revenue
        # find the vendor with the most trips and the total revenue generated by that vendor
        for (vendor_id, total_trips, total_revenue) in values:
            if total_trips > self.max_trips:
                self.max_vendor = vendor_id
                self.max_trips = total_trips
                self.max_revenue = total_revenue
        
        #Making string to print on console
        str = "Vendor: " + self.max_vendor + " have maximum trips and it's revenue is:"
        #emit the vendor with the most trips and the total revenue generated by that vendor
        yield str, (self.max_revenue)

    #Steps to make multi step mrjob
    def steps(self):
        return [
            MRStep(mapper=self.mapper,
                   reducer=self.reducer),
            MRStep(reducer=self.reducer_final)
        ]

if __name__ == '__main__':
    MostTripsAndRevenue.run()
